#ifndef TOKENWISECLASS_H_INCLUDED
#define TOKENWISECLASS_H_INCLUDED
#include "NanoMQSender.h"
#include "Structure.h"

#include <boost/thread/mutex.hpp>
#include <boost/thread/condition_variable.hpp>

//#include <map>
#include<iostream>
#include<string.h>

#include <boost/bimap/bimap.hpp>
#include <boost/bimap/multiset_of.hpp>
#include <map>

using namespace boost::bimaps;

using namespace std;


class BimapDataClass:boost::noncopyable
{
    private:
    typedef bimap<double,multiset_of<int,std::greater<int> > > bm_Data;

    typedef map<double , int> OrderBasedQty;

    typedef map<int , int> PriceBasedQty;

    bm_Data _BidData;
    bm_Data _AskData;

    OrderBasedQty _BidOQty;
    OrderBasedQty _AskOQty;


    PriceBasedQty _BidPQty;
    PriceBasedQty _AskPQty;

    PriceArrray _FP;
    mutable boost::mutex _mtx;

    public:
//    int Token;

    BimapDataClass(int Token)
    {
        boost::unique_lock<boost::mutex> lock(_mtx);
        lock.lock();
        memset(&_FP,0 ,sizeof(PriceArrray));
        _FP.Token = Token;
        _FP.sub_token = Token;
        lock.unlock();

    }


    void Insert(double OrderNumber, int Price, int Qty , short Side)
    {
    boost::unique_lock<boost::mutex> lock(_mtx);
        lock.lock();
        if(Side==1)///BUY
        {
            _BidData.insert( bm_Data::value_type(OrderNumber ,Price) );
            _BidPQty[Price]+=Qty;
            _BidOQty[OrderNumber]=Qty;
        }
        else
        {
            _AskData.insert( bm_Data::value_type(OrderNumber ,Price) );
            _AskPQty[Price]+=Qty;
            _AskOQty[OrderNumber]=Qty;
        }
        lock.unlock();
    }

    void Upate(double OrderNumber, int Price, int Qty, short Side)
    {
    boost::unique_lock<boost::mutex> lock(_mtx);
        lock.lock();
        if(Side == 1)///Bid
        {
            bm_Data::left_iterator it = _BidData.left.find(OrderNumber);

            if(it->first == OrderNumber)
            {
                int _LastPrice = it->second;

                bool successful_replace = _BidData.left.replace_data( it, Price);
                if(successful_replace )
                {

                    int LastTotQty = _BidPQty[_LastPrice];
                    int OrdQty = _BidOQty[OrderNumber];

                    _BidPQty[_LastPrice] = LastTotQty - OrdQty;
                    if( _BidPQty[_LastPrice]<=0)
                        DeletePriceBasedQty( _LastPrice,Side);

                    _BidPQty[Price]+=Qty;
                    _BidOQty[OrderNumber]=Qty;

                }
            }
            else
            {
                Insert(OrderNumber,Price,Qty,Side);
            }

        }
        else
        {
             bm_Data::left_iterator it = _AskData.left.find(OrderNumber);

            if(it->first == OrderNumber)
            {
                int _LastPrice = it->second;

                bool successful_replace = _AskData.left.replace_data( it, Price);
                if(successful_replace )
                {

                    int LastTotQty = _AskPQty[_LastPrice];
                    int OrdQty = _AskOQty[OrderNumber];

                    _AskPQty[_LastPrice] = LastTotQty - OrdQty;
                    if( _AskPQty[_LastPrice]<=0)
                        DeletePriceBasedQty( _LastPrice,Side);

                    _AskPQty[Price]+=Qty;
                    _AskOQty[OrderNumber]=Qty;

                }
            }
            else
            {
                Insert(OrderNumber,Price,Qty,Side);
            }


        }

        lock.unlock();
        //cout << " Key " << it->first << " Data " << it->second<<endl;
    }

    void Delete (double OrderNumber , short Side)
    {
    boost::unique_lock<boost::mutex> lock(_mtx);
        lock.lock();

        if(Side ==1 )
        {
            bm_Data::left_iterator it = _BidData.left.find(OrderNumber);

            int Price = it->second;
            _BidPQty[Price]=(_BidPQty[Price] - _BidOQty[OrderNumber]);

            if( _BidPQty[Price]<=0)
                DeletePriceBasedQty( Price,Side);

            DeleteOrderBasedQty(OrderNumber,Side);

            _BidData.left.erase( it );
        }
       else
       {
            bm_Data::left_iterator it = _AskData.left.find(OrderNumber);

            int Price = it->second;
            _AskPQty[Price]=(_AskPQty[Price] - _AskOQty[OrderNumber]);

            if( _AskPQty[Price]<=0)
                DeletePriceBasedQty( Price,Side);

            DeleteOrderBasedQty(OrderNumber,Side);

            _AskData.left.erase( it );
       }
       lock.unlock();
    }

    void DeletePriceBasedQty(int Price, short Side)
    {
    boost::unique_lock<boost::mutex> lock(_mtx);
        lock.lock();
        if(Side ==1 )///Buy
        {
            PriceBasedQty::iterator _it = _BidPQty.find(Price);
            if(_it!= _BidPQty.end())
            {
                _BidPQty.erase(_it);
            }
        }
        else
        {
            PriceBasedQty::iterator _it = _AskPQty.find(Price);
            if(_it!= _AskPQty.end())
            {
                _AskPQty.erase(_it);
            }

        }
        lock.unlock();
    }

    void DeleteOrderBasedQty(double OrderNumber, short Side)
    {
    boost::unique_lock<boost::mutex> lock(_mtx);
        lock.lock();
        if(Side ==1)///BUY
        {
            OrderBasedQty::iterator _it = _BidOQty.find(OrderNumber);
            if(_it!= _BidOQty.end())
            {
                _BidOQty.erase(_it);
            }
        }
        else
        {
           OrderBasedQty::iterator _it = _AskOQty.find(OrderNumber);
            if(_it!= _AskOQty.end())
            {
                _AskOQty.erase(_it);
            }

        }
        lock.unlock();
    }

    PriceArrray ReturnPrice(int LTP = 0)
    {
    boost::unique_lock<boost::mutex> lock(_mtx);
        lock.lock();
        int BidCount =0;
        int AskCount = 0;



        for( bm_Data::left_const_iterator Bid_iter = _BidData.left.begin(),iend= _BidData.left.end();Bid_iter != iend; ++Bid_iter )
        {


                _FP._FP[BidCount].MAXBID = Bid_iter->second;
                _FP._FP[BidCount].BIDQ = _BidPQty[Bid_iter->second];
                BidCount++;

                  if(BidCount > 4)
                break;
        }

//for(PriceList::reverse_iterator it = _PriceList.rbegin(), it_end(_PriceList.rend()); it != it_end; ++it)
      //  {

        for( bm_Data::left_map::reverse_iterator Ask_iter = _AskData.left.rbegin(),iend= _AskData.left.rend();Ask_iter != iend; ++Ask_iter )
        {


                _FP._FP[AskCount].MINASK = Ask_iter->second;
                _FP._FP[AskCount].ASKQ = _AskPQty[Ask_iter->second];
                AskCount++;

                  if(AskCount > 4)
                break;
        }

        return _FP;
        lock.unlock();
    }

};


class TokenWiseClass:private boost::noncopyable
{




    BimapDataClass * _bmp;





        int Token;
       double BOID;
       double SOID;
        bool BIDASKerror;

        mutable boost::mutex the_mutex;

public:

bool _baunlocked;
bool _ltpunlocked;

boost::condition_variable the_condition_variable;

    TokenWiseClass(int Tkn)
    {
       _bmp= new BimapDataClass(Tkn);

    }


    void BidAsk(Order_Message *Omsg)
    {

     //   cout << " Inside BidAsk 1 "<< Token  <<endl;

        boost::unique_lock<boost::mutex> lock(the_mutex);



        //the_condition_variable.wait(lock);
        //cout << " Inside BidAsk 2 "<< Token <<endl;
	switch (Omsg->Order_Type)
	{
	case 'B':
       // cout << " Inside BidAsk 3 "<< Token <<endl;
		if (Omsg->Message_Type == 'N' )
		{
            _bmp->Insert(Omsg->Order_Id,Omsg->Price,Omsg->Quantity,1);
		}
        else if ( Omsg->Message_Type == 'M')
        {
            _bmp->Upate(Omsg->Order_Id,Omsg->Price,Omsg->Quantity,1);
        }
		else if (Omsg->Message_Type == 'X')
        {
            _bmp->Delete(Omsg->Order_Id,1);
        }

       // cout << " Inside BidAsk 4 "<< Token <<endl;

		break;

	case 'S':
       // cout << " Inside BidAsk 5 "<< Token <<endl;
        if (Omsg->Message_Type == 'N' )
		{
            _bmp->Insert(Omsg->Order_Id,Omsg->Price,Omsg->Quantity,2);
		}
        else if ( Omsg->Message_Type == 'M')
        {
            _bmp->Upate(Omsg->Order_Id,Omsg->Price,Omsg->Quantity,2);
        }
		else if (Omsg->Message_Type == 'X')
        {
            _bmp->Delete(Omsg->Order_Id,2);
        }
       // cout << " Inside BidAsk 6 "<< Token <<endl;
		break;
	  }


    PriceArrray _pr = _bmp->P

            lock.unlock();
           // cout << " Inside BidAsk 13 "<< Token <<endl;
            the_condition_variable.notify_one();
            //cout << " Inside BidAsk 14 "<< Token <<endl;
        //cout<< "BIDASK " << "Token " << _FP.Token << " BID " << _FP.MAXBID << " ASK " << _FP.MINASK << endl;

        //cout << " " << endl;


        }




 void TrdMsg(Trade_Message *Tmsg)
    {


 boost::unique_lock<boost::mutex> lock(the_mutex);





        nanoObj.SendData(_FP);

       
            lock.unlock();

            the_condition_variable.notify_one();

    }






void ClearData()
{
   // _BuySorter.clear();
   // _SellSorter.clear();
//    _SellPriceRecord_D.clear();
  //  _BuyPriceRecord_D.clear();
    cout <<"Data Cleared for Token " << _FP.Token <<endl;

}
~TokenWiseClass()
{
    //dtor
}
};

#endif // TOKENWISECLASS_H_INCLUDED
